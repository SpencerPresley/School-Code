   Programmer  Spencer Presley
   task  c

 include  stdio h 
 include  stdlib h 
 include  unistd h 
 include  sys stat h 
 include  sys types h 
 include  fcntl h 
 define BUFFER SIZE  

void err sys char  string  printf   s   string   exit         for error printing   

int main int argc  char   argv 
 
 if argc      err sys  Error  Enter input file        checks for valid   of arguments on command line   
 int input  alpha  num  other  copy  rd  rd      declaring needed integer variables  rd is used to store read   output  rd  used for when I need to copmare multiple buffers   
 int i      int j         keep track of what iteration we are in loop for use later  used to know where to write characters in copy file   
 char buffer BUFFER SIZE      general use buffer to store characters in   

 umask        clearing umask to set permissions for files   
 input   open argv     O RDONLY      open input file   
 alpha   open  alpha   O CREAT   O RDWR            create alpha file with permissions rw          
 num   open  num   O CREAT   O RDWR            create num  same perms as alpha   
 other   open  other   O CREAT   O RDWR            create open  same perms as alpha and num   
 copy   open  copy   O CREAT   O WRONLY            create copy  same perms as alpha  num  and other   
 
 if input        alpha        num        other        copy       err sys  Error opening  creating files        if any can not open or be created print error and exit   
 
 while  rd   read input  buffer  BUFFER SIZE           while rd     as in file isn t done keep going   
  
  if buffer         n      if buffer is new line character print new line to all files and then continue as to not add unwanted extra characters from other conditionals   
   
   write alpha    n   BUFFER SIZE  
   write num    n   BUFFER SIZE  
   write other    n   BUFFER SIZE  
   continue 
   

  if   buffer        a     buffer        z         buffer        A     buffer        Z        if buffer stores an alphabetical character write character to alpha   
   write alpha  buffer  BUFFER SIZE  
  else
   write alpha       BUFFER SIZE      if buffer does not store alphabetical character write a space to alpha   

  if buffer              buffer               if buffer stores a numerical charactre write character to num   
   write num  buffer  BUFFER SIZE   
  else
   write num       BUFFER SIZE      if buffer does not store numerical character write a space to num   

  if     buffer        a     buffer        z         buffer        a     buffer        z         buffer              buffer                if character is neither alphabetical nor numerical write character to other   
   write other  buffer  BUFFER SIZE  
  else
   write other       BUFFER SIZE      if character is alphabetical or numerical write a space to other   
  

 lseek alpha     SEEK SET   lseek num     SEEK SET   lseek other     SEEK SET   lseek copy     SEEK SET      moving cursor back to beginning of file for every file aside from input   

 while  rd   read alpha  buffer  BUFFER SIZE           initially write contents of alpha to copy   
  
  write copy  buffer  BUFFER SIZE  
  
 
 while  rd   read num  buffer  BUFFER SIZE           handles writing num file contents to copy   
  
  if buffer               if buffer storing character from num file isn t a space then it s a number and we write that character into copy in place of the existing space in that location   
   
   lseek copy  i  SEEK SET      moves the cursor over i times  i tracks where we are in the loop  allows program to know where to insert the character into copy   
   write copy  buffer  BUFFER SIZE      writing   
   

  i       increment i   
  
 

 lseek copy     SEEK SET      moving cursor back to front of copy   
 while  rd   read other  buffer  BUFFER SIZE           handles writing other file to contents of copy   
  
  if buffer               if buffer storing character from other file is a non space then need to write that character to copy in place of the existing space in that location of copy   
   
   lseek copy  j  SEEK SET      moves cursor to correct location in file  correct location is tracked by how far we are in the file which is   to amount of iterations  and j tracks iterations   
   write copy  buffer  BUFFER SIZE      writing   
   

  j       increment j   
  
 
 close input   close alpha   close num   close other   close copy      closing all files   
 exit         succesful program exit   
 
